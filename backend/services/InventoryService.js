const fs = require('fs').promises;
const path = require('path');
const config = require('../config/config');

class InventoryService {
  constructor() {
    this.inventoryFile = config.ansible.inventory;
    this.ensureInventoryFile();
  }

  async ensureInventoryFile() {
    try {
      await fs.mkdir(path.dirname(this.inventoryFile), { recursive: true });
      
      // 檢查文件是否存在，不存在則創建
      try {
        await fs.access(this.inventoryFile);
      } catch {
        await fs.writeFile(this.inventoryFile, `# Ansible Inventory
# Generated by Ansible Web Platform

[all:vars]
ansible_python_interpreter=/usr/bin/python3
ansible_ssh_common_args='-o StrictHostKeyChecking=no'

`);
      }
    } catch (error) {
      console.error('Error ensuring inventory file:', error);
    }
  }

  async getInventory() {
    try {
      const content = await fs.readFile(this.inventoryFile, 'utf8');
      return this.parseInventory(content);
    } catch (error) {
      console.error('Error reading inventory:', error);
      return { groups: {}, hosts: [] };
    }
  }

  parseInventory(content) {
    const lines = content.split('\n');
    const groups = {};
    const hosts = [];
    let currentGroup = null;

    for (const line of lines) {
      const trimmed = line.trim();
      
      // 跳過註釋和空行
      if (!trimmed || trimmed.startsWith('#')) continue;
      
      // 群組定義
      if (trimmed.startsWith('[') && trimmed.endsWith(']')) {
        currentGroup = trimmed.slice(1, -1);
        if (currentGroup && !currentGroup.includes(':')) {
          groups[currentGroup] = [];
        }
        continue;
      }

      // 主機定義
      if (currentGroup && !currentGroup.includes(':')) {
        const hostMatch = trimmed.match(/^(\S+)\s*(.*)/);
        if (hostMatch) {
          const [, hostname, params] = hostMatch;
          const host = { 
            name: hostname, 
            group: currentGroup,
            params: params
          };
          
          // 解析主機參數
          if (params) {
            const paramMatch = params.match(/ansible_host=(\S+)/);
            if (paramMatch) host.ip = paramMatch[1];
            
            const userMatch = params.match(/ansible_user=(\S+)/);
            if (userMatch) host.user = userMatch[1];
            
            const portMatch = params.match(/ansible_port=(\S+)/);
            if (portMatch) host.port = portMatch[1];
          }

          groups[currentGroup].push(host);
          hosts.push(host);
        }
      }
    }

    return { groups, hosts };
  }

  async addHost(hostData) {
    const { name, ip, user, group, port = 22, keyFile } = hostData;
    
    if (!name || !ip || !user || !group) {
      throw new Error('Missing required host parameters');
    }

    // 構建主機條目
    let hostEntry = `${name} ansible_host=${ip} ansible_user=${user}`;
    if (port !== 22) hostEntry += ` ansible_port=${port}`;
    if (keyFile) hostEntry += ` ansible_ssh_private_key_file=${keyFile}`;

    try {
      const content = await fs.readFile(this.inventoryFile, 'utf8');
      const lines = content.split('\n');
      
      // 查找或創建群組
      let groupIndex = -1;
      let insertIndex = -1;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].trim() === `[${group}]`) {
          groupIndex = i;
          break;
        }
      }
      
      if (groupIndex === -1) {
        // 群組不存在，添加新群組
        lines.push(`\n[${group}]`);
        lines.push(hostEntry);
      } else {
        // 在現有群組中添加主機
        insertIndex = groupIndex + 1;
        while (insertIndex < lines.length && 
               !lines[insertIndex].trim().startsWith('[') && 
               lines[insertIndex].trim() !== '') {
          insertIndex++;
        }
        lines.splice(insertIndex, 0, hostEntry);
      }
      
      await fs.writeFile(this.inventoryFile, lines.join('\n'));
      return true;
    } catch (error) {
      console.error('Error adding host:', error);
      throw error;
    }
  }

  async updateHost(oldName, hostData) {
    const { name, ip, user, group, port = 22, keyFile } = hostData;
    
    try {
      const content = await fs.readFile(this.inventoryFile, 'utf8');
      let lines = content.split('\n');
      
      // 移除舊的主機條目
      lines = lines.filter(line => !line.trim().startsWith(oldName + ' '));
      
      // 添加新的主機條目
      await fs.writeFile(this.inventoryFile, lines.join('\n'));
      await this.addHost(hostData);
      
      return true;
    } catch (error) {
      console.error('Error updating host:', error);
      throw error;
    }
  }

  async deleteHost(hostname) {
    try {
      const content = await fs.readFile(this.inventoryFile, 'utf8');
      const lines = content.split('\n');
      
      const filteredLines = lines.filter(line => 
        !line.trim().startsWith(hostname + ' ')
      );
      
      await fs.writeFile(this.inventoryFile, filteredLines.join('\n'));
      return true;
    } catch (error) {
      console.error('Error deleting host:', error);
      throw error;
    }
  }

  async getGroups() {
    const { groups } = await this.getInventory();
    return Object.keys(groups);
  }
}

module.exports = InventoryService;
